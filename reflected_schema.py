# THIS FILE WAS GENERATED BY SQLACODEGEN
# Minor corrections were applied.

# coding: utf-8
from sqlalchemy import Boolean, CheckConstraint, Column, Date, DateTime, Enum, ForeignKey, ForeignKeyConstraint, Integer, SmallInteger, String, Table, Text, text
from sqlalchemy.orm import relationship
from sqlalchemy.dialects.postgresql.base import UUID
from sqlalchemy.ext.declarative import declarative_base


Base = declarative_base()
metadata = Base.metadata


class AchievementType(Base):
    __tablename__ = 'achievement_type'
    __table_args__ = (
        CheckConstraint("(name)::text <> ''::text"),
        CheckConstraint("description <> ''::text"),
        {'schema': 'bookbrainz'}
    )

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.achievement_type_id_seq'::regclass)"))
    name = Column(String(80), nullable=False)
    description = Column(Text, nullable=False)
    badge_url = Column(String(2000))


class AchievementUnlock(Base):
    __tablename__ = 'achievement_unlock'
    __table_args__ = {'schema': 'bookbrainz'}

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.achievement_unlock_id_seq'::regclass)"))
    editor_id = Column(ForeignKey('bookbrainz.editor.id'), nullable=False)
    achievement_id = Column(ForeignKey('bookbrainz.achievement_type.id'), nullable=False)
    unlocked_at = Column(DateTime, nullable=False, server_default=text("timezone('UTC'::text, now())"))
    profile_rank = Column(SmallInteger)

    achievement = relationship('AchievementType')
    editor = relationship('Editor')


class Alias(Base):
    __tablename__ = 'alias'
    __table_args__ = (
        CheckConstraint("name <> ''::text"),
        CheckConstraint("sort_name <> ''::text"),
        {'schema': 'bookbrainz'}
    )

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.alias_id_seq'::regclass)"))
    name = Column(Text, nullable=False)
    sort_name = Column(Text, nullable=False)
    language_id = Column(ForeignKey('musicbrainz.language.id', deferrable=True))
    primary = Column(Boolean, nullable=False, server_default=text("false"))

    language = relationship('Language')
    sets = relationship('AliasSet', secondary='alias_set__alias')


class AliasSet(Base):
    __tablename__ = 'alias_set'
    __table_args__ = {'schema': 'bookbrainz'}

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.alias_set_id_seq'::regclass)"))
    default_alias_id = Column(ForeignKey('bookbrainz.alias.id'))

    default_alias = relationship('Alias')


t_alias_set__alias = Table(
    'alias_set__alias', metadata,
    Column('set_id', ForeignKey('bookbrainz.alias_set.id'), primary_key=True, nullable=False),
    Column('alias_id', ForeignKey('bookbrainz.alias.id'), primary_key=True, nullable=False),
    schema='bookbrainz'
)


class Annotation(Base):
    __tablename__ = 'annotation'
    __table_args__ = {'schema': 'bookbrainz'}

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.annotation_id_seq'::regclass)"))
    content = Column(Text, nullable=False)
    last_revision_id = Column(ForeignKey('bookbrainz.revision.id'), nullable=False)

    last_revision = relationship('Revision')


t_creator = Table(
    'creator', metadata,
    Column('bbid', UUID),
    Column('data_id', Integer),
    Column('revision_id', Integer),
    Column('master', Boolean),
    Column('annotation_id', Integer),
    Column('disambiguation_id', Integer),
    Column('default_alias_id', Integer),
    Column('begin_year', SmallInteger),
    Column('begin_month', SmallInteger),
    Column('begin_day', SmallInteger),
    Column('begin_area_id', Integer),
    Column('end_year', SmallInteger),
    Column('end_month', SmallInteger),
    Column('end_day', SmallInteger),
    Column('end_area_id', Integer),
    Column('ended', Boolean),
    Column('area_id', Integer),
    Column('gender_id', Integer),
    Column('type_id', Integer),
    Column('alias_set_id', Integer),
    Column('identifier_set_id', Integer),
    Column('relationship_set_id', Integer),
    Column('type', Enum('Creator', 'Publication', 'Edition', 'Publisher', 'Work', name='entity_type')),
    schema='bookbrainz'
)


class CreatorCredit(Base):
    __tablename__ = 'creator_credit'
    __table_args__ = {'schema': 'bookbrainz'}

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.creator_credit_id_seq'::regclass)"))
    creator_count = Column(SmallInteger, nullable=False)
    ref_count = Column(Integer, nullable=False, server_default=text("0"))
    begin_phrase = Column(Text, nullable=False, server_default=text("''::text"))


class CreatorCreditName(Base):
    __tablename__ = 'creator_credit_name'
    __table_args__ = (
        CheckConstraint('"position" >= 0'),
        CheckConstraint("(name)::text <> ''::text"),
        {'schema': 'bookbrainz'}
    )

    creator_credit_id = Column(ForeignKey('bookbrainz.creator_credit.id'), primary_key=True, nullable=False)
    position = Column(SmallInteger, primary_key=True, nullable=False)
    creator_bbid = Column(ForeignKey('bookbrainz.creator_header.bbid'), nullable=False)
    name = Column(String, nullable=False)
    join_phrase = Column(Text, nullable=False)

    creator_header = relationship('CreatorHeader')
    creator_credit = relationship('CreatorCredit')


class CreatorDatum(Base):
    __tablename__ = 'creator_data'
    __table_args__ = (
        CheckConstraint('((((end_year IS NOT NULL) OR (end_month IS NOT NULL)) OR (end_day IS NOT NULL)) AND (ended = true)) OR (((end_year IS NULL) AND (end_month IS NULL)) AND (end_day IS NULL))'),
        {'schema': 'bookbrainz'}
    )

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.creator_data_id_seq'::regclass)"))
    alias_set_id = Column(ForeignKey('bookbrainz.alias_set.id'), nullable=False)
    identifier_set_id = Column(ForeignKey('bookbrainz.identifier_set.id'))
    relationship_set_id = Column(ForeignKey('bookbrainz.relationship_set.id'))
    annotation_id = Column(ForeignKey('bookbrainz.annotation.id'))
    disambiguation_id = Column(ForeignKey('bookbrainz.disambiguation.id'))
    begin_year = Column(SmallInteger)
    begin_month = Column(SmallInteger)
    begin_day = Column(SmallInteger)
    begin_area_id = Column(ForeignKey('musicbrainz.area.id', deferrable=True))
    end_year = Column(SmallInteger)
    end_month = Column(SmallInteger)
    end_day = Column(SmallInteger)
    end_area_id = Column(ForeignKey('musicbrainz.area.id', deferrable=True))
    ended = Column(Boolean, nullable=False, server_default=text("false"))
    area_id = Column(ForeignKey('musicbrainz.area.id', deferrable=True))
    gender_id = Column(ForeignKey('musicbrainz.gender.id', deferrable=True))
    type_id = Column(ForeignKey('bookbrainz.creator_type.id'))

    alias_set = relationship('AliasSet')
    annotation = relationship('Annotation')
    area = relationship('Area', primaryjoin='CreatorDatum.area_id == Area.id')
    begin_area = relationship('Area', primaryjoin='CreatorDatum.begin_area_id == Area.id')
    disambiguation = relationship('Disambiguation')
    end_area = relationship('Area', primaryjoin='CreatorDatum.end_area_id == Area.id')
    gender = relationship('Gender')
    identifier_set = relationship('IdentifierSet')
    relationship_set = relationship('RelationshipSet')
    type = relationship('CreatorType')


t_creator_header = Table(
    'creator_header', metadata,
    Column('bbid', ForeignKey('bookbrainz.entity.bbid'), primary_key=True),
    Column('master_revision_id', Integer),
    ForeignKeyConstraint(['master_revision_id', 'bbid'], ['bookbrainz.creator_revision.id', 'bookbrainz.creator_revision.bbid']),
    schema='bookbrainz'
)


class CreatorRevision(Base):
    __tablename__ = 'creator_revision'
    __table_args__ = {'schema': 'bookbrainz'}

    id = Column(ForeignKey('bookbrainz.revision.id'), primary_key=True, nullable=False)
    bbid = Column(ForeignKey('bookbrainz.creator_header.bbid'), primary_key=True, nullable=False)
    data_id = Column(ForeignKey('bookbrainz.creator_data.id'))

    creator_header = relationship('CreatorHeader', primaryjoin='CreatorRevision.bbid == CreatorHeader.bbid')
    data = relationship('CreatorDatum')
    revision = relationship('Revision')


class CreatorType(Base):
    __tablename__ = 'creator_type'
    __table_args__ = (
        CheckConstraint("label <> ''::text"),
        {'schema': 'bookbrainz'}
    )

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.creator_type_id_seq'::regclass)"))
    label = Column(Text, nullable=False, unique=True)


class Disambiguation(Base):
    __tablename__ = 'disambiguation'
    __table_args__ = {'schema': 'bookbrainz'}

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.disambiguation_id_seq'::regclass)"))
    comment = Column(Text, nullable=False)


t_edition = Table(
    'edition', metadata,
    Column('bbid', UUID),
    Column('data_id', Integer),
    Column('revision_id', Integer),
    Column('master', Boolean),
    Column('annotation_id', Integer),
    Column('disambiguation_id', Integer),
    Column('default_alias_id', Integer),
    Column('publication_bbid', UUID),
    Column('creator_credit_id', Integer),
    Column('width', SmallInteger),
    Column('height', SmallInteger),
    Column('depth', SmallInteger),
    Column('weight', SmallInteger),
    Column('pages', SmallInteger),
    Column('format_id', Integer),
    Column('status_id', Integer),
    Column('alias_set_id', Integer),
    Column('identifier_set_id', Integer),
    Column('relationship_set_id', Integer),
    Column('type', Enum('Creator', 'Publication', 'Edition', 'Publisher', 'Work', name='entity_type')),
    Column('language_set_id', Integer),
    Column('release_event_set_id', Integer),
    Column('publisher_set_id', Integer),
    schema='bookbrainz'
)


class EditionDatum(Base):
    __tablename__ = 'edition_data'
    __table_args__ = (
        CheckConstraint('depth >= 0'),
        CheckConstraint('height >= 0'),
        CheckConstraint('pages >= 0'),
        CheckConstraint('weight >= 0'),
        CheckConstraint('width >= 0'),
        {'schema': 'bookbrainz'}
    )

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.edition_data_id_seq'::regclass)"))
    alias_set_id = Column(ForeignKey('bookbrainz.alias_set.id'), nullable=False)
    identifier_set_id = Column(ForeignKey('bookbrainz.identifier_set.id'))
    relationship_set_id = Column(ForeignKey('bookbrainz.relationship_set.id'))
    annotation_id = Column(ForeignKey('bookbrainz.annotation.id'))
    disambiguation_id = Column(ForeignKey('bookbrainz.disambiguation.id'))
    publication_bbid = Column(ForeignKey('bookbrainz.publication_header.bbid'))
    creator_credit_id = Column(ForeignKey('bookbrainz.creator_credit.id'))
    publisher_set_id = Column(ForeignKey('bookbrainz.publisher_set.id'))
    language_set_id = Column(ForeignKey('bookbrainz.language_set.id'))
    release_event_set_id = Column(ForeignKey('bookbrainz.release_event_set.id'))
    width = Column(SmallInteger)
    height = Column(SmallInteger)
    depth = Column(SmallInteger)
    weight = Column(SmallInteger)
    pages = Column(SmallInteger)
    format_id = Column(ForeignKey('bookbrainz.edition_format.id'))
    status_id = Column(ForeignKey('bookbrainz.edition_status.id'))

    alias_set = relationship('AliasSet')
    annotation = relationship('Annotation')
    creator_credit = relationship('CreatorCredit')
    disambiguation = relationship('Disambiguation')
    format = relationship('EditionFormat')
    identifier_set = relationship('IdentifierSet')
    language_set = relationship('LanguageSet')
    publication_header = relationship('PublicationHeader')
    publisher_set = relationship('PublisherSet')
    relationship_set = relationship('RelationshipSet')
    release_event_set = relationship('ReleaseEventSet')
    status = relationship('EditionStatus')


class EditionFormat(Base):
    __tablename__ = 'edition_format'
    __table_args__ = (
        CheckConstraint("label <> ''::text"),
        {'schema': 'bookbrainz'}
    )

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.edition_format_id_seq'::regclass)"))
    label = Column(Text, nullable=False, unique=True)


t_edition_header = Table(
    'edition_header', metadata,
    Column('bbid', ForeignKey('bookbrainz.entity.bbid'), primary_key=True),
    Column('master_revision_id', Integer),
    ForeignKeyConstraint(['master_revision_id', 'bbid'], ['bookbrainz.edition_revision.id', 'bookbrainz.edition_revision.bbid']),
    schema='bookbrainz'
)


class EditionRevision(Base):
    __tablename__ = 'edition_revision'
    __table_args__ = {'schema': 'bookbrainz'}

    id = Column(ForeignKey('bookbrainz.revision.id'), primary_key=True, nullable=False)
    bbid = Column(ForeignKey('bookbrainz.edition_header.bbid'), primary_key=True, nullable=False)
    data_id = Column(ForeignKey('bookbrainz.edition_data.id'))

    edition_header = relationship('EditionHeader', primaryjoin='EditionRevision.bbid == EditionHeader.bbid')
    data = relationship('EditionDatum')
    revision = relationship('Revision')


class EditionStatus(Base):
    __tablename__ = 'edition_status'
    __table_args__ = (
        CheckConstraint("label <> ''::text"),
        {'schema': 'bookbrainz'}
    )

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.edition_status_id_seq'::regclass)"))
    label = Column(Text, nullable=False, unique=True)


class Editor(Base):
    __tablename__ = 'editor'
    __table_args__ = (
        CheckConstraint("(name)::text <> ''::text"),
        CheckConstraint('metabrainz_user_id >= 0'),
        CheckConstraint('revisions_applied >= 0'),
        CheckConstraint('revisions_reverted >= 0'),
        CheckConstraint('total_revisions >= 0'),
        {'schema': 'bookbrainz'}
    )

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.editor_id_seq'::regclass)"))
    name = Column(String(64), nullable=False, unique=True)
    reputation = Column(Integer, nullable=False, server_default=text("0"))
    bio = Column(Text, nullable=False, server_default=text("''::text"))
    birth_date = Column(Date)
    created_at = Column(DateTime, nullable=False, server_default=text("timezone('UTC'::text, now())"))
    active_at = Column(DateTime, nullable=False, server_default=text("timezone('UTC'::text, now())"))
    type_id = Column(ForeignKey('bookbrainz.editor_type.id'), nullable=False)
    gender_id = Column(ForeignKey('musicbrainz.gender.id', deferrable=True))
    area_id = Column(ForeignKey('musicbrainz.area.id', deferrable=True))
    revisions_applied = Column(Integer, nullable=False, server_default=text("0"))
    revisions_reverted = Column(Integer, nullable=False, server_default=text("0"))
    total_revisions = Column(Integer, nullable=False, server_default=text("0"))
    metabrainz_user_id = Column(Integer)
    cached_metabrainz_name = Column(String(64))
    title_unlock_id = Column(ForeignKey('bookbrainz.title_unlock.id'))

    area = relationship('Area')
    gender = relationship('Gender')
    title_unlock = relationship('TitleUnlock', primaryjoin='Editor.title_unlock_id == TitleUnlock.id')
    type = relationship('EditorType')


class EditorLanguage(Base):
    __tablename__ = 'editor__language'
    __table_args__ = {'schema': 'bookbrainz'}

    editor_id = Column(Integer, primary_key=True, nullable=False)
    language_id = Column(Integer, primary_key=True, nullable=False)
    proficiency = Column(Enum('BASIC', 'INTERMEDIATE', 'ADVANCED', 'NATIVE', name='lang_proficiency'), nullable=False)


class EditorType(Base):
    __tablename__ = 'editor_type'
    __table_args__ = (
        CheckConstraint("(label)::text <> ''::text"),
        {'schema': 'bookbrainz'}
    )

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.editor_type_id_seq'::regclass)"))
    label = Column(String(255), nullable=False)


t_entity_redirect = Table(
    'entity_redirect', metadata,
    Column('source_bbid', ForeignKey('bookbrainz.entity.bbid'), primary_key=True, nullable=False),
    Column('target_bbid', ForeignKey('bookbrainz.entity.bbid'), primary_key=True, nullable=False),
    schema='bookbrainz'
)


class Identifier(Base):
    __tablename__ = 'identifier'
    __table_args__ = (
        CheckConstraint("value <> ''::text"),
        {'schema': 'bookbrainz'}
    )

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.identifier_id_seq'::regclass)"))
    type_id = Column(ForeignKey('bookbrainz.identifier_type.id'), nullable=False)
    value = Column(Text, nullable=False)

    type = relationship('IdentifierType')
    sets = relationship('IdentifierSet', secondary='identifier_set__identifier')


class IdentifierSet(Base):
    __tablename__ = 'identifier_set'
    __table_args__ = {'schema': 'bookbrainz'}

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.identifier_set_id_seq'::regclass)"))


t_identifier_set__identifier = Table(
    'identifier_set__identifier', metadata,
    Column('set_id', ForeignKey('bookbrainz.identifier_set.id'), primary_key=True, nullable=False),
    Column('identifier_id', ForeignKey('bookbrainz.identifier.id'), primary_key=True, nullable=False),
    schema='bookbrainz'
)


class IdentifierType(Base):
    __tablename__ = 'identifier_type'
    __table_args__ = (
        CheckConstraint("(label)::text <> ''::text"),
        CheckConstraint("description <> ''::text"),
        CheckConstraint("display_template <> ''::text"),
        {'schema': 'bookbrainz'}
    )

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.identifier_type_id_seq'::regclass)"))
    label = Column(String(255), nullable=False)
    description = Column(Text, nullable=False)
    detection_regex = Column(Text)
    validation_regex = Column(Text, nullable=False)
    display_template = Column(Text, nullable=False)
    entity_type = Column(Enum('Creator', 'Publication', 'Edition', 'Publisher', 'Work', name='entity_type'), nullable=False)
    parent_id = Column(ForeignKey('bookbrainz.identifier_type.id'))
    child_order = Column(Integer, nullable=False, server_default=text("0"))
    deprecated = Column(Boolean, nullable=False, server_default=text("false"))

    parent = relationship('IdentifierType', remote_side=[id])


class LanguageSet(Base):
    __tablename__ = 'language_set'
    __table_args__ = {'schema': 'bookbrainz'}

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.language_set_id_seq'::regclass)"))


t_language_set__language = Table(
    'language_set__language', metadata,
    Column('set_id', ForeignKey('bookbrainz.language_set.id'), primary_key=True, nullable=False),
    Column('language_id', ForeignKey('musicbrainz.language.id', deferrable=True), primary_key=True, nullable=False),
    schema='bookbrainz'
)


class Note(Base):
    __tablename__ = 'note'
    __table_args__ = (
        CheckConstraint("content <> ''::text"),
        {'schema': 'bookbrainz'}
    )

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.note_id_seq'::regclass)"))
    author_id = Column(ForeignKey('bookbrainz.editor.id'), nullable=False)
    revision_id = Column(ForeignKey('bookbrainz.revision.id'), nullable=False)
    content = Column(Text, nullable=False)
    posted_at = Column(DateTime, nullable=False, server_default=text("timezone('UTC'::text, now())"))

    author = relationship('Editor')
    revision = relationship('Revision')


t_publication = Table(
    'publication', metadata,
    Column('bbid', UUID),
    Column('data_id', Integer),
    Column('revision_id', Integer),
    Column('master', Boolean),
    Column('annotation_id', Integer),
    Column('disambiguation_id', Integer),
    Column('default_alias_id', Integer),
    Column('type_id', Integer),
    Column('alias_set_id', Integer),
    Column('identifier_set_id', Integer),
    Column('relationship_set_id', Integer),
    Column('type', Enum('Creator', 'Publication', 'Edition', 'Publisher', 'Work', name='entity_type')),
    schema='bookbrainz'
)


class PublicationDatum(Base):
    __tablename__ = 'publication_data'
    __table_args__ = {'schema': 'bookbrainz'}

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.publication_data_id_seq'::regclass)"))
    alias_set_id = Column(ForeignKey('bookbrainz.alias_set.id'), nullable=False)
    identifier_set_id = Column(ForeignKey('bookbrainz.identifier_set.id'))
    relationship_set_id = Column(ForeignKey('bookbrainz.relationship_set.id'))
    annotation_id = Column(ForeignKey('bookbrainz.annotation.id'))
    disambiguation_id = Column(ForeignKey('bookbrainz.disambiguation.id'))
    type_id = Column(ForeignKey('bookbrainz.publication_type.id'))

    alias_set = relationship('AliasSet')
    annotation = relationship('Annotation')
    disambiguation = relationship('Disambiguation')
    identifier_set = relationship('IdentifierSet')
    relationship_set = relationship('RelationshipSet')
    type = relationship('PublicationType')


t_publication_header = Table(
    'publication_header', metadata,
    Column('bbid', ForeignKey('bookbrainz.entity.bbid'), primary_key=True),
    Column('master_revision_id', Integer),
    ForeignKeyConstraint(['master_revision_id', 'bbid'], ['bookbrainz.publication_revision.id', 'bookbrainz.publication_revision.bbid']),
    schema='bookbrainz'
)


class PublicationRevision(Base):
    __tablename__ = 'publication_revision'
    __table_args__ = {'schema': 'bookbrainz'}

    id = Column(ForeignKey('bookbrainz.revision.id'), primary_key=True, nullable=False)
    bbid = Column(ForeignKey('bookbrainz.publication_header.bbid'), primary_key=True, nullable=False)
    data_id = Column(ForeignKey('bookbrainz.publication_data.id'))

    publication_header = relationship('PublicationHeader', primaryjoin='PublicationRevision.bbid == PublicationHeader.bbid')
    data = relationship('PublicationDatum')
    revision = relationship('Revision')


class PublicationType(Base):
    __tablename__ = 'publication_type'
    __table_args__ = (
        CheckConstraint("label <> ''::text"),
        {'schema': 'bookbrainz'}
    )

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.publication_type_id_seq'::regclass)"))
    label = Column(Text, nullable=False, unique=True)


t_publisher = Table(
    'publisher', metadata,
    Column('bbid', UUID),
    Column('data_id', Integer),
    Column('revision_id', Integer),
    Column('master', Boolean),
    Column('annotation_id', Integer),
    Column('disambiguation_id', Integer),
    Column('default_alias_id', Integer),
    Column('begin_year', SmallInteger),
    Column('begin_month', SmallInteger),
    Column('begin_day', SmallInteger),
    Column('end_year', SmallInteger),
    Column('end_month', SmallInteger),
    Column('end_day', SmallInteger),
    Column('ended', Boolean),
    Column('area_id', Integer),
    Column('type_id', Integer),
    Column('alias_set_id', Integer),
    Column('identifier_set_id', Integer),
    Column('relationship_set_id', Integer),
    Column('type', Enum('Creator', 'Publication', 'Edition', 'Publisher', 'Work', name='entity_type')),
    schema='bookbrainz'
)


class PublisherDatum(Base):
    __tablename__ = 'publisher_data'
    __table_args__ = (
        CheckConstraint('((((end_year IS NOT NULL) OR (end_month IS NOT NULL)) OR (end_day IS NOT NULL)) AND (ended = true)) OR (((end_year IS NULL) AND (end_month IS NULL)) AND (end_day IS NULL))'),
        {'schema': 'bookbrainz'}
    )

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.publisher_data_id_seq'::regclass)"))
    alias_set_id = Column(ForeignKey('bookbrainz.alias_set.id'), nullable=False)
    identifier_set_id = Column(ForeignKey('bookbrainz.identifier_set.id'))
    relationship_set_id = Column(ForeignKey('bookbrainz.relationship_set.id'))
    annotation_id = Column(ForeignKey('bookbrainz.annotation.id'))
    disambiguation_id = Column(ForeignKey('bookbrainz.disambiguation.id'))
    begin_year = Column(SmallInteger)
    begin_month = Column(SmallInteger)
    begin_day = Column(SmallInteger)
    end_year = Column(SmallInteger)
    end_month = Column(SmallInteger)
    end_day = Column(SmallInteger)
    ended = Column(Boolean, nullable=False, server_default=text("false"))
    area_id = Column(ForeignKey('musicbrainz.area.id', deferrable=True))
    type_id = Column(ForeignKey('bookbrainz.publisher_type.id'))

    alias_set = relationship('AliasSet')
    annotation = relationship('Annotation')
    area = relationship('Area')
    disambiguation = relationship('Disambiguation')
    identifier_set = relationship('IdentifierSet')
    relationship_set = relationship('RelationshipSet')
    type = relationship('PublisherType')


t_publisher_header = Table(
    'publisher_header', metadata,
    Column('bbid', ForeignKey('bookbrainz.entity.bbid'), primary_key=True),
    Column('master_revision_id', Integer),
    ForeignKeyConstraint(['master_revision_id', 'bbid'], ['bookbrainz.publisher_revision.id', 'bookbrainz.publisher_revision.bbid']),
    schema='bookbrainz'
)


class PublisherRevision(Base):
    __tablename__ = 'publisher_revision'
    __table_args__ = {'schema': 'bookbrainz'}

    id = Column(ForeignKey('bookbrainz.revision.id'), primary_key=True, nullable=False)
    bbid = Column(ForeignKey('bookbrainz.publisher_header.bbid'), primary_key=True, nullable=False)
    data_id = Column(ForeignKey('bookbrainz.publisher_data.id'))

    publisher_header = relationship('PublisherHeader', primaryjoin='PublisherRevision.bbid == PublisherHeader.bbid')
    data = relationship('PublisherDatum')
    revision = relationship('Revision')


class PublisherSet(Base):
    __tablename__ = 'publisher_set'
    __table_args__ = {'schema': 'bookbrainz'}

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.publisher_set_id_seq'::regclass)"))


t_publisher_set__publisher = Table(
    'publisher_set__publisher', metadata,
    Column('set_id', ForeignKey('bookbrainz.publisher_set.id'), primary_key=True, nullable=False),
    Column('publisher_bbid', ForeignKey('bookbrainz.publisher_header.bbid'), primary_key=True, nullable=False),
    schema='bookbrainz'
)


class PublisherType(Base):
    __tablename__ = 'publisher_type'
    __table_args__ = (
        CheckConstraint("label <> ''::text"),
        {'schema': 'bookbrainz'}
    )

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.publisher_type_id_seq'::regclass)"))
    label = Column(Text, nullable=False, unique=True)


class Entity(Base):
    __tablename__ = 'entity'
    __table_args__ = {'schema': 'bookbrainz'}

    bbid = Column(UUID, primary_key=True)
    type = Column(Enum('Creator', 'Publication', 'Edition', 'Publisher', 'Work', name='entity_type'), nullable=False)


class Relationship(Base):
    __tablename__ = 'relationship'
    __table_args__ = {'schema': 'bookbrainz'}

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.relationship_id_seq'::regclass)"))
    type_id = Column(ForeignKey('bookbrainz.relationship_type.id'), nullable=False)
    source_bbid = Column(ForeignKey('bookbrainz.entity.bbid'), nullable=False)
    target_bbid = Column(ForeignKey('bookbrainz.entity.bbid'), nullable=False)

    entity = relationship('Entity', primaryjoin='Relationship.source_bbid == Entity.bbid')
    entity1 = relationship('Entity', primaryjoin='Relationship.target_bbid == Entity.bbid')
    type = relationship('RelationshipType')
    sets = relationship('RelationshipSet', secondary='relationship_set__relationship')


class RelationshipSet(Base):
    __tablename__ = 'relationship_set'
    __table_args__ = {'schema': 'bookbrainz'}

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.relationship_set_id_seq'::regclass)"))


t_relationship_set__relationship = Table(
    'relationship_set__relationship', metadata,
    Column('set_id', ForeignKey('bookbrainz.relationship_set.id'), primary_key=True, nullable=False),
    Column('relationship_id', ForeignKey('bookbrainz.relationship.id'), primary_key=True, nullable=False),
    schema='bookbrainz'
)


class RelationshipType(Base):
    __tablename__ = 'relationship_type'
    __table_args__ = (
        CheckConstraint("(label)::text <> ''::text"),
        CheckConstraint("description <> ''::text"),
        CheckConstraint("display_template <> ''::text"),
        {'schema': 'bookbrainz'}
    )

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.relationship_type_id_seq'::regclass)"))
    label = Column(String(255), nullable=False)
    description = Column(Text, nullable=False)
    display_template = Column(Text, nullable=False)
    source_entity_type = Column(Enum('Creator', 'Publication', 'Edition', 'Publisher', 'Work', name='entity_type'), nullable=False)
    target_entity_type = Column(Enum('Creator', 'Publication', 'Edition', 'Publisher', 'Work', name='entity_type'), nullable=False)
    parent_id = Column(ForeignKey('bookbrainz.relationship_type.id'))
    child_order = Column(Integer, nullable=False, server_default=text("0"))
    deprecated = Column(Boolean, nullable=False, server_default=text("false"))

    parent = relationship('RelationshipType', remote_side=[id])


class ReleaseEvent(Base):
    __tablename__ = 'release_event'
    __table_args__ = {'schema': 'bookbrainz'}

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.release_event_id_seq'::regclass)"))
    year = Column(SmallInteger)
    month = Column(SmallInteger)
    day = Column(SmallInteger)
    area_id = Column(ForeignKey('musicbrainz.country_area.area', deferrable=True))

    area = relationship('CountryArea')
    sets = relationship('ReleaseEventSet', secondary='release_event_set__release_event')


class ReleaseEventSet(Base):
    __tablename__ = 'release_event_set'
    __table_args__ = {'schema': 'bookbrainz'}

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.release_event_set_id_seq'::regclass)"))


t_release_event_set__release_event = Table(
    'release_event_set__release_event', metadata,
    Column('set_id', ForeignKey('bookbrainz.release_event_set.id'), primary_key=True, nullable=False),
    Column('release_event_id', ForeignKey('bookbrainz.release_event.id'), primary_key=True, nullable=False),
    schema='bookbrainz'
)


class Revision(Base):
    __tablename__ = 'revision'
    __table_args__ = {'schema': 'bookbrainz'}

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.revision_id_seq'::regclass)"))
    author_id = Column(ForeignKey('bookbrainz.editor.id'), nullable=False)
    created_at = Column(DateTime, nullable=False, server_default=text("timezone('UTC'::text, now())"))

    author = relationship('Editor')
    parents = relationship(
        'Revision',
        secondary='revision_parent',
        primaryjoin='Revision.id == revision_parent.c.child_id',
        secondaryjoin='Revision.id == revision_parent.c.parent_id'
    )


t_revision_parent = Table(
    'revision_parent', metadata,
    Column('parent_id', ForeignKey('bookbrainz.revision.id'), primary_key=True, nullable=False),
    Column('child_id', ForeignKey('bookbrainz.revision.id'), primary_key=True, nullable=False),
    schema='bookbrainz'
)


class TitleType(Base):
    __tablename__ = 'title_type'
    __table_args__ = (
        CheckConstraint("(title)::text <> ''::text"),
        CheckConstraint("description <> ''::text"),
        {'schema': 'bookbrainz'}
    )

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.title_type_id_seq'::regclass)"))
    title = Column(String(40), nullable=False)
    description = Column(Text, nullable=False)


class TitleUnlock(Base):
    __tablename__ = 'title_unlock'
    __table_args__ = {'schema': 'bookbrainz'}

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.title_unlock_id_seq'::regclass)"))
    editor_id = Column(ForeignKey('bookbrainz.editor.id'), nullable=False)
    title_id = Column(ForeignKey('bookbrainz.title_type.id'), nullable=False)
    unlocked_at = Column(DateTime, nullable=False, server_default=text("timezone('UTC'::text, now())"))

    editor = relationship('Editor', primaryjoin='TitleUnlock.editor_id == Editor.id')
    title = relationship('TitleType')


t_work = Table(
    'work', metadata,
    Column('bbid', UUID),
    Column('data_id', Integer),
    Column('revision_id', Integer),
    Column('master', Boolean),
    Column('annotation_id', Integer),
    Column('disambiguation_id', Integer),
    Column('default_alias_id', Integer),
    Column('type_id', Integer),
    Column('alias_set_id', Integer),
    Column('identifier_set_id', Integer),
    Column('relationship_set_id', Integer),
    Column('type', Enum('Creator', 'Publication', 'Edition', 'Publisher', 'Work', name='entity_type')),
    Column('language_set_id', Integer),
    schema='bookbrainz'
)


class WorkDatum(Base):
    __tablename__ = 'work_data'
    __table_args__ = {'schema': 'bookbrainz'}

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.work_data_id_seq'::regclass)"))
    alias_set_id = Column(ForeignKey('bookbrainz.alias_set.id'), nullable=False)
    identifier_set_id = Column(ForeignKey('bookbrainz.identifier_set.id'))
    relationship_set_id = Column(ForeignKey('bookbrainz.relationship_set.id'))
    annotation_id = Column(ForeignKey('bookbrainz.annotation.id'))
    disambiguation_id = Column(ForeignKey('bookbrainz.disambiguation.id'))
    language_set_id = Column(ForeignKey('bookbrainz.language_set.id'))
    type_id = Column(ForeignKey('bookbrainz.work_type.id'))

    alias_set = relationship('AliasSet')
    annotation = relationship('Annotation')
    disambiguation = relationship('Disambiguation')
    identifier_set = relationship('IdentifierSet')
    language_set = relationship('LanguageSet')
    relationship_set = relationship('RelationshipSet')
    type = relationship('WorkType')


t_work_header = Table(
    'work_header', metadata,
    Column('bbid', ForeignKey('bookbrainz.entity.bbid'), primary_key=True),
    Column('master_revision_id', Integer),
    ForeignKeyConstraint(['master_revision_id', 'bbid'], ['bookbrainz.work_revision.id', 'bookbrainz.work_revision.bbid']),
    schema='bookbrainz'
)


class WorkRevision(Base):
    __tablename__ = 'work_revision'
    __table_args__ = {'schema': 'bookbrainz'}

    id = Column(ForeignKey('bookbrainz.revision.id'), primary_key=True, nullable=False)
    bbid = Column(ForeignKey('bookbrainz.work_header.bbid'), primary_key=True, nullable=False)
    data_id = Column(ForeignKey('bookbrainz.work_data.id'))

    work_header = relationship('WorkHeader', primaryjoin='WorkRevision.bbid == WorkHeader.bbid')
    data = relationship('WorkDatum')
    revision = relationship('Revision')


class WorkType(Base):
    __tablename__ = 'work_type'
    __table_args__ = (
        CheckConstraint("label <> ''::text"),
        {'schema': 'bookbrainz'}
    )

    id = Column(Integer, primary_key=True, server_default=text("nextval('bookbrainz.work_type_id_seq'::regclass)"))
    label = Column(Text, nullable=False, unique=True)


class Area(Base):
    __tablename__ = 'area'
    __table_args__ = (
        CheckConstraint('((((end_date_year IS NOT NULL) OR (end_date_month IS NOT NULL)) OR (end_date_day IS NOT NULL)) AND (ended = true)) OR (((end_date_year IS NULL) AND (end_date_month IS NULL)) AND (end_date_day IS NULL))'),
        CheckConstraint('edits_pending >= 0'),
        {'schema': 'musicbrainz'}
    )

    id = Column(Integer, primary_key=True, server_default=text("nextval('musicbrainz.area_id_seq'::regclass)"))
    gid = Column(UUID, nullable=False)
    name = Column(String, nullable=False)
    type = Column(Integer)
    edits_pending = Column(Integer, nullable=False, server_default=text("0"))
    last_updated = Column(DateTime(True), server_default=text("now()"))
    begin_date_year = Column(SmallInteger)
    begin_date_month = Column(SmallInteger)
    begin_date_day = Column(SmallInteger)
    end_date_year = Column(SmallInteger)
    end_date_month = Column(SmallInteger)
    end_date_day = Column(SmallInteger)
    ended = Column(Boolean, nullable=False, server_default=text("false"))
    comment = Column(String(255), nullable=False, server_default=text("''::character varying"))


class CountryArea(Base):
    __tablename__ = 'country_area'
    __table_args__ = {'schema': 'musicbrainz'}

    area = Column(Integer, primary_key=True)


class Gender(Base):
    __tablename__ = 'gender'
    __table_args__ = {'schema': 'musicbrainz'}

    id = Column(Integer, primary_key=True, server_default=text("nextval('musicbrainz.gender_id_seq'::regclass)"))
    name = Column(String(255), nullable=False)
    parent = Column(ForeignKey('musicbrainz.gender.id'))
    child_order = Column(Integer, nullable=False, server_default=text("0"))
    description = Column(Text)

    parent1 = relationship('Gender', remote_side=[id])


class Language(Base):
    __tablename__ = 'language'
    __table_args__ = {'schema': 'musicbrainz'}

    id = Column(Integer, primary_key=True, server_default=text("nextval('musicbrainz.language_id_seq'::regclass)"))
    iso_code_2t = Column(String(3))
    iso_code_2b = Column(String(3))
    iso_code_1 = Column(String(2))
    name = Column(String(100), nullable=False)
    frequency = Column(Integer, nullable=False, server_default=text("0"))
    iso_code_3 = Column(String(3))

    sets = relationship('LanguageSet', secondary='language_set__language')
